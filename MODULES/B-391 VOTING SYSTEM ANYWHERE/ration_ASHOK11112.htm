<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\ration_ASHOK11112.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\ration_ASHOK11112.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sun May 13 19:57:40 2018
<BR><P>
<H3>Maximum Stack Usage =         92 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; PEOPLE_SERACHING_FINGER &rArr; FACE_VERIFYING &rArr;  main (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1675658]">Reset_Handler</a>
 <LI><a href="#[16758b0]">Undef_Handler</a>
 <LI><a href="#[1675874]">SWI_Handler</a>
 <LI><a href="#[1675838]">PAbt_Handler</a>
 <LI><a href="#[16757fc]">DAbt_Handler</a>
 <LI><a href="#[16757c0]">IRQ_Handler</a>
 <LI><a href="#[1675784]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1673ee8]">FACE_VERIFYING</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1673df8]">main</a><BR>
 <LI><a href="#[1673f24]">FACE_VERIFYING_1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1673df8]">main</a><BR>
 <LI><a href="#[1673f60]">FACE_VERIFYING_2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1673df8]">main</a><BR>
 <LI><a href="#[1673f9c]">FACE_VERIFYING_3</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1673df8]">main</a><BR>
 <LI><a href="#[16758b0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16758b0]">Undef_Handler</a><BR>
 <LI><a href="#[1675874]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1675874]">SWI_Handler</a><BR>
 <LI><a href="#[1675838]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1675838]">PAbt_Handler</a><BR>
 <LI><a href="#[16757fc]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16757fc]">DAbt_Handler</a><BR>
 <LI><a href="#[16757c0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16757c0]">IRQ_Handler</a><BR>
 <LI><a href="#[1675784]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1675784]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1675658]">Reset_Handler</a>
 <LI><a href="#[16758b0]">Undef_Handler</a>
 <LI><a href="#[1675874]">SWI_Handler</a>
 <LI><a href="#[1675838]">PAbt_Handler</a>
 <LI><a href="#[16757fc]">DAbt_Handler</a>
 <LI><a href="#[16757c0]">IRQ_Handler</a>
 <LI><a href="#[1675784]">FIQ_Handler</a>
 <LI><a href="#[1670e28]">__main</a>
 <LI><a href="#[1673df8]">main</a>
 <LI><a href="#[166ee48]">_sputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1675658]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1670e28]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[16673b4]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[16672c4]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[229d0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1667288]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[229d0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1667198]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[1673fd8]"></a>ms_delay</STRONG> (ARM, 48 bytes, Stack size 0 bytes, uarttest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1673f9c]"></a>FACE_VERIFYING_3</STRONG> (ARM, 240 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = FACE_VERIFYING_3 &rArr;  main (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167390c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_uart_init
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1673bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_4
<LI><a href="#[1673dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_recieve
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
</UL>

<P><STRONG><a name="[1673f60]"></a>FACE_VERIFYING_2</STRONG> (ARM, 240 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = FACE_VERIFYING_2 &rArr;  main (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167390c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_uart_init
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1673c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_3
<LI><a href="#[1673dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_recieve
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
</UL>

<P><STRONG><a name="[1673f24]"></a>FACE_VERIFYING_1</STRONG> (ARM, 300 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = FACE_VERIFYING_1 &rArr;  main (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167390c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_uart_init
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1673c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_2
<LI><a href="#[1673dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_recieve
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
</UL>

<P><STRONG><a name="[1673ee8]"></a>FACE_VERIFYING</STRONG> (ARM, 240 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = FACE_VERIFYING &rArr;  main (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167390c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_uart_init
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1673c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_1
<LI><a href="#[1673dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_recieve
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
</UL>

<P><STRONG><a name="[1673eac]"></a>FINGER_SCAN</STRONG> (ARM, 1208 bytes, Stack size 24 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FINGER_SCAN &rArr; putSLcd &rArr; lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[166eb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16738d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putc
<LI><a href="#[1673948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
</UL>

<P><STRONG><a name="[1673e70]"></a>PEOPLE_SERACHING_FINGER</STRONG> (ARM, 664 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PEOPLE_SERACHING_FINGER &rArr; FACE_VERIFYING &rArr;  main (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1673eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SCAN
<LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1673e34]"></a>FINGER_ENROL</STRONG> (ARM, 1264 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FINGER_ENROL &rArr; putSLcd &rArr; lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[16738d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putc
<LI><a href="#[1673948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1673df8]"></a>main</STRONG> (ARM, 256 bytes, Stack size 8 bytes, uarttest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = main &rArr; PEOPLE_SERACHING_FINGER &rArr; FACE_VERIFYING &rArr;  main (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1673894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[167390c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_uart_init
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1673ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[1673d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[1673e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_ENROL
<LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
<LI><a href="#[1673fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[167327c]"></a>UART0Handler</STRONG> (ARM, 384 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1673240]"></a>UART1Handler</STRONG> (ARM, 384 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1673d08]"></a>UARTInit</STRONG> (ARM, 296 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTInit &rArr; install_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1673204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1673ccc]"></a>UARTSend</STRONG> (ARM, 172 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1672cdc]"></a>DefaultVICHandler</STRONG> (ARM, 20 bytes, Stack size 8 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[1672ca0]"></a>init_VIC</STRONG> (ARM, 92 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[1673204]"></a>install_irq</STRONG> (ARM, 132 bytes, Stack size 12 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = install_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1673d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[1672c64]"></a>uninstall_irq</STRONG> (ARM, 144 bytes, Stack size 8 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[1673ab0]"></a>delay</STRONG> (ARM, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[1673bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_4
<LI><a href="#[1673c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_3
<LI><a href="#[1673c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_2
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1673e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_ENROL
<LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
<LI><a href="#[1673eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SCAN
<LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[16724a8]"></a>sendchar</STRONG> (ARM, 80 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[167246c]"></a>uart0_getkey</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[1672430]"></a>uart1_getkey</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1670f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[1670f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_RECEIVE_IP
<LI><a href="#[1670fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CONNECT_Response
<LI><a href="#[1671008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
</UL>

<P><STRONG><a name="[1673894]"></a>uart1_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16723f4]"></a>uart1_putc</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16723b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
</UL>

<P><STRONG><a name="[16723b8]"></a>uart1_puts</STRONG> (ARM, 36 bytes, Stack size 4 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart1_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[16723f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_4
<LI><a href="#[1673c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_3
<LI><a href="#[1673c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_2
<LI><a href="#[1673c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_1
</UL>

<P><STRONG><a name="[167237c]"></a>uart0_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[16738d0]"></a>uart0_putc</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1672340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[1673e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_ENROL
<LI><a href="#[1673eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SCAN
</UL>

<P><STRONG><a name="[1672340]"></a>uart0_puts</STRONG> (ARM, 36 bytes, Stack size 4 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16738d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putc
</UL>

<P><STRONG><a name="[1671fbc]"></a>delay_lcd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, main_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1671ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
<LI><a href="#[1671f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[1671f80]"></a>wait_lcd</STRONG> (ARM, 124 bytes, Stack size 4 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[1671ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[16739c0]"></a>lcd_command_write</STRONG> (ARM, 268 bytes, Stack size 16 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[1671fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1671e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cmd
<LI><a href="#[1671f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[16739fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[1673bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_4
<LI><a href="#[1673c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_3
<LI><a href="#[1673c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_2
<LI><a href="#[1673c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_1
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1673e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_ENROL
<LI><a href="#[1673eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SCAN
</UL>

<P><STRONG><a name="[1671f44]"></a>set_lcd_port_output</STRONG> (ARM, 56 bytes, Stack size 0 bytes, main_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1673a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[16739fc]"></a>lcd_clear</STRONG> (ARM, 16 bytes, Stack size 8 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_clear &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
<LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[1671f08]"></a>lcd_gotoxy</STRONG> (ARM, 92 bytes, Stack size 16 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[1671ecc]"></a>lcd_data_write</STRONG> (ARM, 192 bytes, Stack size 16 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[1671fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[1671e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[1671e90]"></a>lcd_putchar</STRONG> (ARM, 20 bytes, Stack size 8 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1673948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[1673984]"></a>lcd_putstring</STRONG> (ARM, 80 bytes, Stack size 24 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[1671f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
</UL>
<BR>[Called By]<UL><LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_4
<LI><a href="#[1673c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_3
<LI><a href="#[1673c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_2
<LI><a href="#[1673c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_1
<LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1673e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEOPLE_SERACHING_FINGER
<LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[1673a74]"></a>init_lcd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, main_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_lcd &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_output
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1671e54]"></a>test_cmd</STRONG> (ARM, 56 bytes, Stack size 8 bytes, main_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[167390c]"></a>soft_uart_init</STRONG> (ARM, 56 bytes, Stack size 0 bytes, softuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[1671878]"></a>timer1delay</STRONG> (ARM, 104 bytes, Stack size 0 bytes, softuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_transmit
<LI><a href="#[1673dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_recieve
</UL>

<P><STRONG><a name="[167183c]"></a>SOFT_UART_transmit</STRONG> (ARM, 164 bytes, Stack size 8 bytes, softuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1671878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1671800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_tstring
</UL>

<P><STRONG><a name="[1671800]"></a>SOFT_UART_tstring</STRONG> (ARM, 36 bytes, Stack size 8 bytes, softuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_UART_transmit
</UL>

<P><STRONG><a name="[1673dbc]"></a>SOFT_UART_recieve</STRONG> (ARM, 156 bytes, Stack size 8 bytes, softuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOFT_UART_recieve
</UL>
<BR>[Calls]<UL><LI><a href="#[1671878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[1673948]"></a>putSLcd</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = putSLcd &rArr; lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1673e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_ENROL
<LI><a href="#[1673eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SCAN
</UL>

<P><STRONG><a name="[1671044]"></a>delay_1</STRONG> (ARM, 56 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
<LI><a href="#[1673bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_4
<LI><a href="#[1673c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_3
<LI><a href="#[1673c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_2
<LI><a href="#[1673c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UPLOAD_1
</UL>

<P><STRONG><a name="[1671008]"></a>recvResponse</STRONG> (ARM, 60 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = recvResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1672430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1673a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intWIFI
</UL>

<P><STRONG><a name="[1670fcc]"></a>WIFI_CONNECT_Response</STRONG> (ARM, 60 bytes, Stack size 16 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1672430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
</UL>

<P><STRONG><a name="[1670f90]"></a>WIFI_RECEIVE_IP</STRONG> (ARM, 60 bytes, Stack size 16 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1672430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
</UL>

<P><STRONG><a name="[1670f54]"></a>Receive_Data</STRONG> (ARM, 84 bytes, Stack size 16 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1672430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
</UL>

<P><STRONG><a name="[1673a38]"></a>intWIFI</STRONG> (ARM, 328 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = intWIFI &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
<LI><a href="#[1671044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
<LI><a href="#[16723b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[16723f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1673df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
<LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
<LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
<LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[1673c90]"></a>WIFI_UPLOAD_1</STRONG> (ARM, 464 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WIFI_UPLOAD_1 &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
<LI><a href="#[16723b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1673ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING
</UL>

<P><STRONG><a name="[1673c54]"></a>WIFI_UPLOAD_2</STRONG> (ARM, 160 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WIFI_UPLOAD_2 &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
<LI><a href="#[16723b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_1
</UL>

<P><STRONG><a name="[1673c18]"></a>WIFI_UPLOAD_3</STRONG> (ARM, 160 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WIFI_UPLOAD_3 &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
<LI><a href="#[16723b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_2
</UL>

<P><STRONG><a name="[1673bdc]"></a>WIFI_UPLOAD_4</STRONG> (ARM, 160 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WIFI_UPLOAD_4 &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1671044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
<LI><a href="#[16723b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1673984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[16739c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[1673ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1673f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FACE_VERIFYING_3
</UL>

<P><STRONG><a name="[229d8ec]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[229d8b0]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[229d0f4]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1667288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[16672c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[229d0b8]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[166ebf0]"></a>__0sprintf$1</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166ee48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[166eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166ebb4]"></a>__1sprintf$1</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[166eb78]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1673eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SCAN
</UL>

<P><STRONG><a name="[229c758]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229c758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[229c758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[229c71c]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[229c6e0]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16758b0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[16758b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16758b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1675874]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1675874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1675874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1675838]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1675838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1675838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16757fc]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[16757fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16757fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16757c0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[16757c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16757c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1675784]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1675784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1675784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[166eec0]"></a>_printf_core</STRONG> (ARM, 504 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229d8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[166ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[166ee48]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[166ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
